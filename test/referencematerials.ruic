require 'fileutils'
FileUtils.copy_entry('projects/ReferencedMaterials','projects/_RefMat',false,false,true)

metadata 'MetaData.xml'

uia 'projects/_RefMat/ReferencedMaterials.uia'
show app.errors if app.errors?

layer   = app/'main:Scene.Layer'
cubemat = layer/"Cube"/"Material"

assert cubemat['diffuse'].linked?
assert cubemat.has_slide?(0)
assert cubemat.has_slide?(1)
assert cubemat.has_slide?(2)
assert cubemat['diffuse',1].r == 0.5
assert cubemat['diffuse',2].r == 0.5

# When we do not unlink, values remain shared
cubemat['diffuse',1].r = 1
cubemat['diffuse',2].r = 0.2
assert cubemat['diffuse',1].r == cubemat['diffuse',2].r

cubemat['diffuse'].unlink!
assert !cubemat['diffuse'].linked?

cubemat['diffuse',1].r = 1
cubemat['diffuse',2].r = 0.2
assert cubemat['diffuse',1].r == 1
assert cubemat['diffuse',2].r == 0.2

%w[Sphere Sphere2].each do |name|
	mat = layer/name/"Material"
	assert mat
	assert mat.type == 'Material'
	model = mat.parent
	ref = mat.replace_with_referenced_material
	assert mat.parent.nil?                      # The old material is removed from the graph
	assert ref.parent==model                    # The new material is where the old was
	assert ref['id'] == mat['id']               # The new material has the same id and name
	assert ref.name == 'Material'
	assert ref['referencedmaterial',0].nil?
end

app.save_all!


FileUtils.rm_rf('projects/_RefMat')